PRED_OC <- read.csv("D:/simple-stratif/optim-stratif/PRED_OC.csv")
View(PRED_OC)
OCcdf <- ecdf(PRED_OC$oc_kgm3)
# total number of cells
cells <- 5055
# number of strata
strat <- 6
# n
n <- 48
#specify strata cum(sqrt(f)) rule
f<-OCcdf(PRED_OC$oc_kgm3)
OC<-PRED_OC$oc_kgm3
sqf<-sqrt(f)
s1<- sequence(strat)
s1
bound1<-s1/strat
bound1
strata_name<-seq(1,cells)
for (k in s1)
{
idx<-if (k==1) {which(sqf <= bound1[k])} else {which (sqf > bound1[k-1] & sqf <= bound1[k])}
strata_name[idx]<-k
}
#write data
data <- cbind(PRED_OC, sqf, strata_name)
colnames(data) <- c("x", "y", "OC_kgm2", "Sqrt(cdf)", "strata_i")
#write data
#allocation
aj<-matrix(0,nrow=strat,ncol=1)
nj<-matrix(0,nrow=strat,ncol=1)
Sj<-matrix(0,nrow=strat,ncol=1)
Vj<-matrix(0,nrow=strat,ncol=1)
for (j in s1)
{
ij<-which(strata_name==j)
aj[j] <- length(ij)/cells
Sj[j] <- sd(OC[ij])
Vj[j] <- var(OC[ij])
}
asj <- sum(aj*Sj)
for (j in s1)
{
nj[j] <- n*aj[j]*Sj[j]/asj
}
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
View(Vj)
SV1 <- sum(aj^2*Vj/nj)
###write data
strata_output_i <- cbind((seq(1,strat)), Sj, Vj, aj, nj)
colnames(strata_output_i) <- c("Strata", "StD_i", "Var_i", "rel_area_i", "alloc_i")
fr <- function(x,s1,sqf,OC,cells,strat)
{
bound1<-cbind(x[1:strat-1],1)
nj<-x[strat:(strat*2-1)]
for (k in s1)
{
idx<-if (k==1) {which(sqf <= bound1[k])} else {which (sqf > bound1[k-1] & sqf <= bound1[k])}
strata_name[idx]<-k
}
aj<-matrix(0,nrow=strat,ncol=1)
Vj<-matrix(0,nrow=strat,ncol=1)
for (j in s1)
{
ij<-which(strata_name==j)
aj[j] <- length(ij)/cells
Vj[j] <- var(OC[ij])
}
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
sum(aj^2*Vj/nj)
}
x<-matrix(0,nrow=strat*2-1,ncol=1)
x[1:strat-1]=bound1[1:strat-1] # boundaries to optimise
x[6:11,1]=nj # no. samples for each stratum (change in relation)
opt1<-optim(x,fr,s1=s1,sqf=sqf,OC=OC,cells=cells,strat=strat)
View(Vj)
View(Vj)
bound<-(opt1$par[1:strat-1])
bound[strat]=1
nj<-opt1$par[6:11] # change as required
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
Vmin<-opt1$value # sampling variance minimised
optim_perform <- cbind(SV1, Vmin)
colnames(optim_perform) <- c("Var", "Var_optim")
View(optim_perform)
View(aj)
strata_optput_o$Vj_i <- Vj
strata_output_o <- cbind(Vj, aj, nj)
colnames(strata_output_o) <- c("Var_i", "rel_area_i", "alloc_i")
View(strata_output_o)
View(strata_output_i)
strata_optput_o$Vj_i <- Vj
strata_output_o$Vj_i <- Vj
strata_output_o <- cbind(Vj, aj, nj)
colnames(strata_output_o) <- c("Var_i", "rel_area_i", "alloc_i")
View(Vj)
strata_output_o$Vj_i <- Vj$V1
strata_output_o[5,6, "new"] <- NA
strata_output_o[5:6, "new"] <- NA
strata_output_o[6:5, "new"] <- NA
View(strata_output_o)
strata_output_o[3:6, "new"] <- NA
strata_output_o[3:6, "new"] <- "test"
test <- merge(strata_output_i, strata_output_o)
View(test)
strata_output_o$new <- strata_output_i$StD_i
strata_output_o$new <- strata_output_i
strata_output_o <- cbind(Vj, aj, nj)
colnames(strata_output_o) <- c("Var_i", "rel_area_i", "alloc_i")
strata_output_o$new <- NA
strata_output_o <- cbind(Vj, aj, nj)
colnames(strata_output_o) <- c("Var_i", "rel_area_i", "alloc_i")
View(strata_output_i)
strata_detail <- cbind(strata_output_o, strata_output_i)
View(test)
View(strata_detail)
strata_output_i <- cbind((seq(1,strat)), Sj, Vj, aj, nj, bound1)
colnames(strata_output_i) <- c("Strata", "StD_i", "Var_i", "rel_area_i", "alloc_i", "bound_i")
strata_output_o <- cbind(Vj, aj, nj, bound)
colnames(strata_output_o) <- c("Var_o", "rel_area_o", "alloc_o", "bound_o")
strata_detail <- cbind(strata_output_o, strata_output_i)
View(strata_detail)
strata_detail <- cbind(strata_output_i, strata_output_o)
View(strata_detail)
PRED_OC <- read.csv("D:/simple-stratif/optim-stratif/PRED_OC.csv")
View(PRED_OC)
OCcdf <- ecdf(PRED_OC$oc_kgm3)
# total number of cells
cells <- 5055
# number of strata
strat <- 6
# n
n <- 48
#specify strata cum(sqrt(f)) rule
f<-OCcdf(PRED_OC$oc_kgm3)
OC<-PRED_OC$oc_kgm3
sqf<-sqrt(f)
s1<- sequence(strat)
s1
bound1<-s1/strat
bound1
strata_name<-seq(1,cells)
for (k in s1)
{
idx<-if (k==1) {which(sqf <= bound1[k])} else {which (sqf > bound1[k-1] & sqf <= bound1[k])}
strata_name[idx]<-k
}
#write data
data <- cbind(PRED_OC, sqf, strata_name)
colnames(data) <- c("x", "y", "OC_kgm2", "Sqrt(cdf)", "strata_i")
#write data
#allocation
aj<-matrix(0,nrow=strat,ncol=1)
nj<-matrix(0,nrow=strat,ncol=1)
Sj<-matrix(0,nrow=strat,ncol=1)
Vj<-matrix(0,nrow=strat,ncol=1)
for (j in s1)
{
ij<-which(strata_name==j)
aj[j] <- length(ij)/cells
Sj[j] <- sd(OC[ij])
Vj[j] <- var(OC[ij])
}
asj <- sum(aj*Sj)
for (j in s1)
{
nj[j] <- n*aj[j]*Sj[j]/asj
}
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
SV1 <- sum(aj^2*Vj/nj)
strata_output_i <- cbind((seq(1,strat)), Sj, Vj, aj, nj, bound1)
colnames(strata_output_i) <- c("Strata", "StD_i", "Var_i", "rel_area_i", "alloc_i", "bound_i")
fr <- function(x,s1,sqf,OC,cells,strat)
{
bound1<-cbind(x[1:strat-1],1)
nj<-x[strat:(strat*2-1)]
for (k in s1)
{
idx<-if (k==1) {which(sqf <= bound1[k])} else {which (sqf > bound1[k-1] & sqf <= bound1[k])}
strata_name[idx]<-k
}
aj<-matrix(0,nrow=strat,ncol=1)
Vj<-matrix(0,nrow=strat,ncol=1)
for (j in s1)
{
ij<-which(strata_name==j)
aj[j] <- length(ij)/cells
Vj[j] <- var(OC[ij])
}
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
sum(aj^2*Vj/nj)
}
x<-matrix(0,nrow=strat*2-1,ncol=1)
x[1:strat-1]=bound1[1:strat-1] # boundaries to optimise
x[6:11,1]=nj # no. samples for each stratum (change in relation)
opt1<-optim(x,fr,s1=s1,sqf=sqf,OC=OC,cells=cells,strat=strat)
bound<-(opt1$par[1:strat-1])
bound[strat]=1
nj<-opt1$par[6:11] # change as required
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
Vmin<-opt1$value # sampling variance minimised
strata_output_o <- cbind(Vj, aj, nj, bound)
colnames(strata_output_o) <- c("Var_o", "rel_area_o", "alloc_o", "bound_o")
strata_detail <- cbind(strata_output_i, strata_output_o)
View(strata_detail)
fix(`s1`)
fr
fix(`s1`)
View(Vj)
fix(`s1`)
View(data)
fix(idx)
fix(strata_name)
strata_name[idx]
PRED_OC <- read.csv("D:/simple-stratif/optim-stratif/PRED_OC.csv")
View(PRED_OC)
getwd()
PRED_OC <- read.csv("PRED_OC.csv")
PRED_OC <- PRED_OC[order(PRED_OC$oc_kgm3) ,]
OCcdf <- ecdf(PRED_OC$oc_kgm3)
cells <- 5055
strat <- 6
n <- 48
fix(OCcdf)
fix(OCcdf)
f<-OCcdf(PRED_OC$oc_kgm3)
fix(f)
OCcdf[1]; PRED_OC$oc_kgm3[1]
f[1]; PRED_OC$oc_kgm3[1]
f[2]; PRED_OC$oc_kgm3[2]
f[12]; PRED_OC$oc_kgm3[12]
OC<-PRED_OC$oc_kgm3
sqf<-sqrt(f)
s1<- sequence(strat)
s1
bound1<-s1/strat
bound1
strata_name<-seq(1,cells)
for (k in s1)
{
idx<-if (k==1) {which(sqf <= bound1[k])} else {which (sqf > bound1[k-1] & sqf <= bound1[k])}
strata_name[idx]<-k
}
fix(strata_name)
fix(strata_name)
data <- cbind(PRED_OC, sqf, strata_name)
colnames(data) <- c("x", "y", "OC_kgm2", "Sqrt(cdf)", "strata_i")
View(data)
aj<-matrix(0,nrow=strat,ncol=1)
nj<-matrix(0,nrow=strat,ncol=1)
Sj<-matrix(0,nrow=strat,ncol=1)
Vj<-matrix(0,nrow=strat,ncol=1)
fix(`s1`)
fix(strata_name)
for (j in s1)
{
ij<-which(strata_name==j)
aj[j] <- length(ij)/cells
Sj[j] <- sd(OC[ij])
Vj[j] <- var(OC[ij])
}
asj <- sum(aj*Sj)
for (j in s1)
{
nj[j] <- n*aj[j]*Sj[j]/asj
}
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
nj
SV1 <- sum(aj^2*Vj/nj)
strata_output_i <- cbind((seq(1,strat)), Sj, Vj, aj, nj, bound1)
colnames(strata_output_i) <- c("Strata", "StD_i", "Var_i", "rel_area_i", "alloc_i", "bound_i")
View(strata_output_i)
fr <- function(x,s1,sqf,OC,cells,strat)
{
bound1<-cbind(x[1:strat-1],1)
nj<-x[strat:(strat*2-1)]
for (k in s1)
{
idx<-if (k==1) {which(sqf <= bound1[k])} else {which (sqf > bound1[k-1] & sqf <= bound1[k])}
strata_name[idx]<-k
}
aj<-matrix(0,nrow=strat,ncol=1)
Vj<-matrix(0,nrow=strat,ncol=1)
for (j in s1)
{
ij<-which(strata_name==j)
aj[j] <- length(ij)/cells
Vj[j] <- var(OC[ij])
}
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
sum(aj^2*Vj/nj)
}
x
x<-matrix(0,nrow=strat*2-1,ncol=1)
x[1:strat-1]=bound1[1:strat-1] # boundaries to optimise
x[6:11,1]=nj # no. samples for each stratum (change in relation)
x
opt1<-optim(x,fr,s1=s1,sqf=sqf,OC=OC,cells=cells,strat=strat)
bound<-(opt1$par[1:strat-1])
bound[strat]=1
bound
nj<-opt1$par[6:11] # change as required
nj
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
nj
Vmin<-opt1$value # sampling variance minimised
Vmin
strata_output_o <- cbind(Vj, aj, nj, bound)
colnames(strata_output_o) <- c("Var_o", "rel_area_o", "alloc_o", "bound_o")
strata_detail <- cbind(strata_output_i, strata_output_o)
optim_perform <- cbind(SV1, Vmin)
colnames(optim_perform) <- c("Var", "Var_optim")
View(optim_perform)
View(strata_detail)
str(opt1)
View(x)
View(x)
PRED_OC <- read.csv("PRED_OC.csv")
str(PRED_OC)
# sort data in ascending order
PRED_OC <- PRED_OC[order(PRED_OC$oc_kgm3),]
# create cdf function for this data:
OCcdf <- ecdf(PRED_OC$oc_kgm3)
cells <- nrow(PRED_OC)
ns <- 6
n <- 48
nmin = 2
PRED_OC$sqf <- sqrt(OCcdf(PRED_OC$oc_kgm3))
PRED_OC$strata_name <- cut(x=PRED_OC$sqf, breaks=0:ns/ns, labels = paste("L",1:ns,sep=""))
View(PRED_OC)
strata_output_i <- data.frame(Strata=levels(PRED_OC$strata_name), StD_i=rep(NA, ns), Var_i=rep(NA, ns), rel_area_i=rep(NA, ns), alloc_i=rep(NA, ns), bound_i=rep(NA, ns))
strata_output_i$StD_i <- aggregate(PRED_OC$oc_kgm3, by=list(PRED_OC$strata_name), FUN=sd)$x
strata_output_i$Var_i <- strata_output_i$StD_i^2
strata_output_i$rel_area_i <- summary(PRED_OC$strata_name, maxsum=ns)/cells
strata_output_i$alloc_i <-  round(n * strata_output_i$rel_area_i * strata_output_i$StD_i / sum(strata_output_i$rel_area_i * strata_output_i$StD_i), 0) # sd(PRED_OC$oc_kgm3)
strata_output_i$alloc_i <- round(strata_output_i$alloc_i / n * (n - ns*2), 0) + nmin
strata_output_i$bound_i <- (0:ns/ns)[-1]
View(strata_output_i)
totVar(alloc_i=log(c(2,3,4,10,12,17)), bound_i=1:6/6, vals=PRED_OC$oc_kgm3, n=48)
totVar <- function(alloc_i, bound_i, vals, n){
# 'bound_i' - needs to be in format low_upper , ... , 1;
# 'alloc_i' - sampling numbers per strata;
# 'vals' - vector of values;
alloc_i <- exp(alloc_i)
if(length(alloc_i)==length(bound_i)){
if(any(alloc_i < 0)){
stop("Negative number of samples not permitted")
}
Xcdf <- ecdf(vals)
Lc <- cut(x=sqrt(Xcdf(vals)), breaks=c(0, bound_i), labels = paste("L",1:length(alloc_i), sep=""))
Var <- aggregate(vals, by=list(Lc), FUN=var)$x
# relative area:
ra <- summary(Lc, maxsum=length(bound_i))/length(vals)
# adjust numbers:
alloc_a <- round(alloc_i / sum(alloc_i) * (n-2*length(bound_i))+2, 0)
totvar <- sum(ra^2*Var/alloc_a)
return(totvar)
}
else{ stop("Number of elements in alloc_i and bound_i must correspond") }
}
totVar(alloc_i=log(c(2,3,4,10,12,17)), bound_i=1:6/6, vals=PRED_OC$oc_kgm3, n=48)
alloc_i = log(c(2,3,4,10,12,17))
st.opt <- optim(par=alloc_i, fn=totVar, bound_i=1:6/6, vals=PRED_OC$oc_kgm3, n=48)
st.opt
alloc_out <- round(exp(st.opt$par), 0)
alloc_out <- round(alloc_out / sum(alloc_out) * (n-2*length(bound_i))+2, 0)
bound_i=1:6/6
alloc_out <- round(alloc_out / sum(alloc_out) * (n-2*length(bound_i))+2, 0)
alloc_out
bound_i <- (1:ns/ns)
alloc_out <- round(alloc_out / sum(alloc_out) * (n-2*length(bound_i))+2, 0)
alloc_out
sum(alloc_out)
st.opt <- optim(par=alloc_i, fn=totVar, bound_i=(1:ns/ns), vals=PRED_OC$oc_kgm3, n=48)
st.opt
alloc_out <- round(exp(st.opt$par), 0)
bound_i <- (1:ns/ns)
alloc_out <- round(alloc_out / sum(alloc_out) * (n-2*length(bound_i))+2, 0)
alloc_out
totVar(alloc_i=log(c(17,10,4,3,12,2)), bound_i=1:6/6, vals=PRED_OC$oc_kgm3, n=48)
alloc_i = log(c(17,10,4,3,12,2))
st.opt <- optim(par=alloc_i, fn=totVar, bound_i=(1:ns/ns), vals=PRED_OC$oc_kgm3, n=48)
st.opt
alloc_out <- round(exp(st.opt$par), 0)
bound_i <- (1:ns/ns)
alloc_out <- round(alloc_out / sum(alloc_out) * (n-2*length(bound_i))+2, 0)
alloc_out
PRED_OC <- read.csv("PRED_OC.csv")
library("stratification")
View(PRED_OC)
strata.cumrootf(x=PRED_OC$oc_kgm3, nclass, n = 48, CV = NULL, Ls = 6, certain = NULL,
alloc = list(q1 = 0.5, q2 = 0, q3 = 0.5), rh = rep(1, Ls),
model = c("none"),
model.control = list())
strata.cumrootf(x=PRED_OC$oc_kgm3, nclass=6, n = 48, CV = NULL, Ls = 6, certain = NULL,
alloc = list(q1 = 0.5, q2 = 0, q3 = 0.5), rh = rep(1, Ls),
model = c("none"),
model.control = list())
strata.cumrootf(x=PRED_OC$oc_kgm3, nclass=5055, n = 48, CV = NULL, Ls = 6, certain = NULL,
alloc = list(q1 = 0.5, q2 = 0, q3 = 0.5), rh = rep(1, Ls),
model = c("none"),
model.control = list())
strata.cumrootf(x=PRED_OC$oc_kgm3, nclass=5055, n = 48, CV = NULL, Ls = 5055, certain = NULL,
alloc = list(q1 = 0.5, q2 = 0, q3 = 0.5), rh = rep(1, Ls),
model = c("none"),
model.control = list())
strata.cumrootf(x=PRED_OC$oc_kgm3, nclass=5055, n = 48, CV = NULL, Ls = 6, certain = NULL,
alloc = list(q1 = 0.5, q2 = 0, q3 = 0.5), rh = rep(1, Ls),
model = c("none"),
model.control = list())
strata.cumrootf(x=PRED_OC$oc_kgm3, nclass=5055, n = 48, CV = NULL, Ls = NULL, certain = NULL,
alloc = list(q1 = 0.5, q2 = 0, q3 = 0.5), rh = rep(1, Ls),
model = c("none"),
model.control = list())
strata.cumrootf(x=PRED_OC$oc_kgm3, nclass=5055, n = 48, CV = NULL, Ls = 6, certain = NULL,
alloc = list(q1 = 0.5, q2 = 0, q3 = 0.5), rh = rep(1, Ls=6),
model = c("none"),
model.control = list())
PRED_OC <- PRED_OC[order(PRED_OC$oc_kgm3) ,]
# cdf
OCcdf <- ecdf(PRED_OC$oc_kgm3)
# total number of cells
cells <- 5055
# number of strata
strat <- 6
# n
n <- 48
#specify strata cum(sqrt(f)) rule
f<-OCcdf(PRED_OC$oc_kgm3)
OC<-PRED_OC$oc_kgm3
sqf<-sqrt(f)
s1<- sequence(strat)
s1
bound1<-s1/strat
bound1
strata_name<-seq(1,cells)
for (k in s1)
{
idx<-if (k==1) {which(sqf <= bound1[k])} else {which (sqf > bound1[k-1] & sqf <= bound1[k])}
strata_name[idx]<-k
}
#write data
data <- cbind(PRED_OC, sqf, strata_name)
colnames(data) <- c("x", "y", "OC_kgm2", "Sqrt(cdf)", "strata_i")
#write data
#allocation
aj<-matrix(0,nrow=strat,ncol=1)
nj<-matrix(0,nrow=strat,ncol=1)
Sj<-matrix(0,nrow=strat,ncol=1)
Vj<-matrix(0,nrow=strat,ncol=1)
for (j in s1)
{
ij<-which(strata_name==j)
aj[j] <- length(ij)/cells
Sj[j] <- sd(OC[ij])
Vj[j] <- var(OC[ij])
}
asj <- sum(aj*Sj)
for (j in s1)
{
nj[j] <- n*aj[j]*Sj[j]/asj
}
nj <- round(nj)
n2<-matrix(2,nrow=strat,ncol=1)
sumn2 <- sum(n2)
nj <- round(nj/n*(n-sumn2)) + n2
#Stratum var
SV1 <- sum(aj^2*Vj/nj)
View(data)
View(nj)
strata_output_i <- cbind((seq(1,strat)), Sj, Vj, aj, nj, bound1)
colnames(strata_output_i) <- c("Strata", "StD_i", "Var_i", "rel_area_i", "alloc_i", "bound_i")
###write data
View(strata_output_i)
load("D:/simple-stratif/optim-stratif/pkg/data/springf.rda")
View(springf)
str(springf)
